# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.dfs.maze_search as module_0


def test_case_0():
    dict_0 = {}
    tuple_0 = (dict_0,)
    var_0 = module_0.find_path(tuple_0)
    assert var_0 == -1
    var_1 = module_0.find_path(tuple_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"3g\xc6-O\xf7;\xa3A"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.find_path(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 670
    none_type_0 = None
    module_0.dfs(int_0, none_type_0, none_type_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    tuple_0 = (dict_0,)
    var_0 = module_0.find_path(tuple_0)
    assert var_0 == -1
    var_1 = module_0.find_path(tuple_0)
    assert var_1 == 0
    bytes_0 = b"\xff\xd9\x0cSf\x98\xb0\xb9\xf4c\x99;"
    var_2 = module_0.dfs(tuple_0, var_0, var_1, var_0, bytes_0)
    assert var_2 == b"\xff\xd9\x0cSf\x98\xb0\xb9\xf4c\x99;"
    module_0.find_path(var_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = {}
    tuple_0 = (dict_0,)
    var_0 = module_0.find_path(tuple_0)
    assert var_0 == -1
    var_1 = module_0.find_path(tuple_0)
    assert var_1 == 0
    module_0.dfs(tuple_0, var_1, var_1, tuple_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    dict_0 = {}
    tuple_0 = (dict_0,)
    var_0 = module_0.find_path(tuple_0)
    assert var_0 == -1
    var_1 = module_0.find_path(tuple_0)
    assert var_1 == 0
    var_2 = module_0.dfs(tuple_0, var_1, var_1, var_1, var_1)
    assert var_2 == 0
    module_0.dfs(var_2, var_0, var_0, var_2, var_2)


@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = {}
    tuple_0 = (dict_0,)
    var_0 = module_0.find_path(tuple_0)
    assert var_0 == -1
    var_1 = module_0.find_path(tuple_0)
    assert var_1 == 0
    none_type_0 = None
    module_0.dfs(tuple_0, var_1, var_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    dict_0 = {}
    tuple_0 = (dict_0,)
    var_0 = module_0.find_path(tuple_0)
    assert var_0 == -1
    var_1 = module_0.find_path(tuple_0)
    assert var_1 == 0
    bytes_0 = b"\xff\xd9\x0cS\x96\x98\xb0\xb9\xf4c\x99;"
    var_2 = module_0.dfs(tuple_0, var_0, var_1, var_0, bytes_0)
    assert var_2 == b"\xff\xd9\x0cS\x96\x98\xb0\xb9\xf4c\x99;"
    var_3 = module_0.find_path(tuple_0)
    assert var_3 == 0
    var_4 = module_0.dfs(tuple_0, var_1, var_3, var_0, var_3)
    assert var_4 == -1
    module_0.find_path(var_1)
