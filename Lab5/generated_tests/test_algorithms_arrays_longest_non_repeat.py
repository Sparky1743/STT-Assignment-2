# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.arrays.longest_non_repeat as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.get_longest_non_repeat_v1(none_type_0)
    var_1 = module_0.get_longest_non_repeat_v3(var_0)
    var_2 = module_0.longest_non_repeat_v1(none_type_0)
    assert var_2 == 0
    var_3 = module_0.get_longest_non_repeat_v2(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b""
    int_0 = -502
    list_0 = [bytes_0, bytes_0, int_0, bytes_0]
    list_1 = [list_0, bytes_0, int_0, list_0]
    module_0.longest_non_repeat_v1(list_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_0.longest_non_repeat_v2(none_type_0)
    assert var_0 == 0
    var_1 = module_0.longest_non_repeat_v1(none_type_0)
    assert var_1 == 0
    var_2 = module_0.longest_non_repeat_v2(none_type_0)
    assert var_2 == 0
    var_3 = module_0.longest_non_repeat_v1(none_type_0)
    assert var_3 == 0
    module_0.get_longest_non_repeat_v2(var_2)


def test_case_3():
    bytes_0 = b"=\xe3AT"
    var_0 = module_0.get_longest_non_repeat_v2(bytes_0)
    var_1 = module_0.get_longest_non_repeat_v3(bytes_0)
    list_0 = [var_1, var_0, bytes_0]
    var_2 = module_0.longest_non_repeat_v2(list_0)
    assert var_2 == 2
    var_3 = module_0.longest_non_repeat_v1(var_1)
    assert var_3 == 2


def test_case_4():
    list_0 = []
    var_0 = module_0.get_longest_non_repeat_v1(list_0)
    var_1 = module_0.get_longest_non_repeat_v1(var_0)
    var_2 = module_0.get_longest_non_repeat_v3(var_0)


def test_case_5():
    none_type_0 = None
    var_0 = module_0.get_longest_non_repeat_v1(none_type_0)
    var_1 = module_0.get_longest_non_repeat_v1(none_type_0)
    var_2 = module_0.get_longest_non_repeat_v2(none_type_0)
    var_3 = module_0.get_longest_non_repeat_v1(none_type_0)
    var_4 = module_0.get_longest_non_repeat_v1(none_type_0)
    var_5 = module_0.get_longest_non_repeat_v1(none_type_0)
    var_6 = module_0.get_longest_non_repeat_v2(none_type_0)


def test_case_6():
    bytes_0 = b"\x7f\x9f\x81D\x89%\xb0\x030\xe4FL\x8e9\xa5\x8f8'aV"
    var_0 = module_0.get_longest_non_repeat_v2(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = ">\nc$"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.get_longest_non_repeat_v3(str_0)
    module_0.get_longest_non_repeat_v2(dict_0)


def test_case_8():
    set_0 = set()
    var_0 = module_0.get_longest_non_repeat_v3(set_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    var_0 = module_0.get_longest_non_repeat_v1(none_type_0)
    var_1 = module_0.longest_non_repeat_v1(var_0)
    assert var_1 == 2
    var_2 = module_0.longest_non_repeat_v1(none_type_0)
    assert var_2 == 0
    module_1.object(**var_2)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "J(@^v`CG3l/jDRd}jW"
    var_0 = module_0.longest_non_repeat_v2(str_0)
    assert var_0 == 16
    var_1 = module_0.get_longest_non_repeat_v3(str_0)
    module_0.longest_non_repeat_v1(var_0)


def test_case_11():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    var_0 = module_0.longest_non_repeat_v1(list_0)
    assert var_0 == 1
    bytes_0 = b"V\xf7:\xae\xf4"
    none_type_0 = None
    var_1 = module_0.get_longest_non_repeat_v1(bytes_0)
    var_2 = module_0.longest_non_repeat_v1(none_type_0)
    assert var_2 == 0
    var_3 = module_0.get_longest_non_repeat_v2(bytes_0)
    set_0 = module_0.get_longest_non_repeat_v2(none_type_0)
    var_4 = module_0.longest_non_repeat_v2(set_0)
    assert var_4 == 2


def test_case_12():
    bytes_0 = b"=\xe3AT"
    var_0 = module_0.get_longest_non_repeat_v2(bytes_0)
    var_1 = module_0.get_longest_non_repeat_v1(var_0)
    var_2 = module_0.longest_non_repeat_v2(var_1)
    assert var_2 == 2
    var_3 = module_0.get_longest_non_repeat_v3(var_0)
    var_4 = module_0.get_longest_non_repeat_v2(var_0)
    list_0 = [var_4, var_0, var_4]
    var_5 = module_0.longest_non_repeat_v2(list_0)
    assert var_5 == 2
    var_6 = module_0.longest_non_repeat_v2(var_1)
    assert var_6 == 2
    var_7 = module_0.longest_non_repeat_v1(bytes_0)
    assert var_7 == 4
    var_8 = module_0.get_longest_non_repeat_v2(list_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    var_0 = module_0.get_longest_non_repeat_v1(none_type_0)
    bytes_0 = b"\xc9e\x9d\x91\xeci\xc4\x07\x92\xf0\xa7\xe0PP\xec\xad\x86\x18 "
    var_1 = module_0.get_longest_non_repeat_v1(var_0)
    var_2 = module_0.get_longest_non_repeat_v2(bytes_0)
    str_0 = "{^Ja\t`23zXm~"
    var_3 = module_0.longest_non_repeat_v1(str_0)
    assert var_3 == 12
    var_4 = module_0.longest_non_repeat_v1(none_type_0)
    assert var_4 == 0
    module_0.get_longest_non_repeat_v2(var_3)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "J(@^v`CG3l/jDRd}jW"
    var_0 = module_0.get_longest_non_repeat_v1(str_0)
    var_1 = module_0.get_longest_non_repeat_v3(str_0)
    var_2 = module_0.longest_non_repeat_v2(str_0)
    assert var_2 == 16
    var_3 = module_0.longest_non_repeat_v2(str_0)
    assert var_3 == 16
    module_0.get_longest_non_repeat_v1(var_3)


def test_case_15():
    bytes_0 = b"=\xe3AT"
    none_type_0 = None
    var_0 = module_0.get_longest_non_repeat_v1(none_type_0)
    var_1 = module_0.get_longest_non_repeat_v1(none_type_0)
    var_2 = module_0.get_longest_non_repeat_v2(bytes_0)
    var_3 = module_0.get_longest_non_repeat_v3(bytes_0)
    var_4 = module_0.get_longest_non_repeat_v1(var_0)
    var_5 = module_0.longest_non_repeat_v2(none_type_0)
    assert var_5 == 0
    var_6 = module_0.get_longest_non_repeat_v2(var_1)
    list_0 = [var_6, var_6, var_3, var_1, var_2, var_6]
    var_7 = module_0.longest_non_repeat_v2(list_0)
    assert var_7 == 3
    var_8 = module_0.longest_non_repeat_v2(var_1)
    assert var_8 == 2
    bytes_1 = b""
    var_9 = module_0.longest_non_repeat_v1(bytes_1)
    assert var_9 == 0
    var_10 = module_0.get_longest_non_repeat_v3(list_0)
