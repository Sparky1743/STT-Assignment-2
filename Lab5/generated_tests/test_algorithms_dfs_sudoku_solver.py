# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.dfs.sudoku_solver as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.Sudoku(bool_0, bool_0, bool_0)


def test_case_1():
    int_0 = -1117
    sudoku_0 = module_0.Sudoku(int_0, int_0, int_0)


def test_case_2():
    int_0 = -1117
    sudoku_0 = module_0.Sudoku(int_0, int_0, int_0)
    var_0 = sudoku_0.solve()
    assert var_0 is True


def test_case_3():
    bool_0 = True
    var_0 = bool_0.__str__()
    sudoku_0 = module_0.Sudoku(var_0, bool_0, bool_0)
    assert (
        f"{type(sudoku_0).__module__}.{type(sudoku_0).__qualname__}"
        == "algorithms.dfs.sudoku_solver.Sudoku"
    )
    assert sudoku_0.board == "True"
    assert sudoku_0.row is True
    assert sudoku_0.col is True
    assert sudoku_0.val == {}
    var_1 = sudoku_0.__str__()
    assert var_1 == " T \n"


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\x05\xbe}0"
    module_0.Sudoku(bytes_0, bytes_0, bytes_0)


def test_case_5():
    bool_0 = True
    var_0 = bool_0.__str__()
    sudoku_0 = module_0.Sudoku(var_0, bool_0, bool_0)
    assert (
        f"{type(sudoku_0).__module__}.{type(sudoku_0).__qualname__}"
        == "algorithms.dfs.sudoku_solver.Sudoku"
    )
    assert sudoku_0.board == "True"
    assert sudoku_0.row is True
    assert sudoku_0.col is True
    assert sudoku_0.val == {}


def test_case_6():
    bool_0 = True
    str_0 = ".~7/se\r:~B 3Z XT\x0b{|J"
    sudoku_0 = module_0.Sudoku(str_0, bool_0, bool_0)
    assert (
        f"{type(sudoku_0).__module__}.{type(sudoku_0).__qualname__}"
        == "algorithms.dfs.sudoku_solver.Sudoku"
    )
    assert sudoku_0.board == ".~7/se\r:~B 3Z XT\x0b{|J"
    assert sudoku_0.row is True
    assert sudoku_0.col is True
    assert sudoku_0.val == {(0, 0): ["1", "2", "3", "4", "5", "6", "7", "8", "9"]}


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    str_0 = ".~7/se\r:~B 3Z XT\x0b{|J"
    sudoku_0 = module_0.Sudoku(str_0, bool_0, bool_0)
    assert (
        f"{type(sudoku_0).__module__}.{type(sudoku_0).__qualname__}"
        == "algorithms.dfs.sudoku_solver.Sudoku"
    )
    assert sudoku_0.board == ".~7/se\r:~B 3Z XT\x0b{|J"
    assert sudoku_0.row is True
    assert sudoku_0.col is True
    assert sudoku_0.val == {(0, 0): ["1", "2", "3", "4", "5", "6", "7", "8", "9"]}
    sudoku_0.solve()
