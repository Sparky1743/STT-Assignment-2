# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.backtrack.pattern_match as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b""
    none_type_0 = None
    module_0.pattern_match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 202
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.pattern_match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.pattern_match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"S\xe0:\x82+\x15\xa8!\xae*\x8c>X\xed"
    float_0 = 876.2802
    var_0 = module_0.pattern_match(bytes_0, bytes_0)
    assert var_0 is True
    set_0 = {bytes_0, float_0}
    module_0.pattern_match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"S\xe0:\x82+\x15\xa8!\xae*\x8c>X\xed"
    dict_0 = {bytes_0: bytes_0}
    var_0 = module_0.pattern_match(bytes_0, dict_0)
    assert var_0 is False
    module_0.pattern_match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 6
    str_0 = "cPj$!f-$*!"
    tuple_0 = (int_0, str_0, str_0)
    var_0 = module_0.pattern_match(tuple_0, tuple_0)
    assert var_0 is True
    float_0 = -645.5497673563905
    none_type_0 = None
    module_0.pattern_match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    var_0 = module_0.pattern_match(list_0, list_0)
    assert var_0 is True
    str_0 = "R=$5\x0b8[|"
    var_1 = module_0.pattern_match(str_0, str_0)
    assert var_1 is True
    var_2 = module_1.object()
    list_1 = [str_0, str_0]
    tuple_0 = (str_0, var_2)
    var_3 = module_0.pattern_match(tuple_0, tuple_0)
    assert var_3 is True
    set_0 = set()
    var_4 = module_0.pattern_match(set_0, set_0)
    assert var_4 is True
    var_5 = module_0.pattern_match(list_1, tuple_0)
    assert var_5 is False
    module_0.pattern_match(tuple_0, var_3)


@pytest.mark.xfail(strict=True)
def test_case_7():
    list_0 = []
    str_0 = "\x0c\\Bc\\"
    var_0 = module_0.pattern_match(str_0, str_0)
    assert var_0 is True
    var_1 = module_0.pattern_match(list_0, str_0)
    assert var_1 is False
    module_0.pattern_match(var_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    var_0 = module_0.pattern_match(list_0, list_0)
    assert var_0 is True
    str_0 = "R=$5\x0b8[|"
    var_1 = module_0.pattern_match(str_0, str_0)
    assert var_1 is True
    var_2 = module_0.pattern_match(str_0, str_0)
    assert var_2 is True
    tuple_0 = (var_2, var_2, var_2)
    tuple_1 = (str_0, tuple_0)
    var_3 = module_0.pattern_match(tuple_1, tuple_0)
    assert var_3 is True
    set_0 = set()
    var_4 = module_0.pattern_match(set_0, set_0)
    assert var_4 is True
    var_5 = module_0.pattern_match(list_0, tuple_1)
    assert var_5 is False
    module_0.pattern_match(set_0, var_4)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    var_0 = module_1.object()
    str_0 = "R=$5\x0b8[|"
    var_1 = module_1.object()
    var_2 = module_0.pattern_match(str_0, str_0)
    assert var_2 is True
    list_1 = [str_0, str_0, str_0, var_2]
    tuple_0 = (str_0, var_2)
    var_3 = module_0.pattern_match(tuple_0, tuple_0)
    assert var_3 is True
    set_0 = module_0.pattern_match(list_0, list_1)
    assert set_0 is False
    module_0.pattern_match(set_0, set_0)
