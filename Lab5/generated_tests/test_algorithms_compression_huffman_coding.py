# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.compression.huffman_coding as module_0
import heapq as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    huffman_reader_0 = module_0.HuffmanReader(none_type_0)
    huffman_reader_0.load_tree()


@pytest.mark.xfail(strict=True)
def test_case_1():
    node_0 = module_0.Node()
    assert node_0.frequency == 0
    huffman_writer_0 = module_0.HuffmanWriter(node_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    var_0 = huffman_writer_0.save_tree(node_0)
    assert huffman_writer_0.buffer == "1"
    assert huffman_writer_0.saved_bits == 1
    huffman_writer_0.close()


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    huffman_writer_0 = module_0.HuffmanWriter(bool_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    var_0 = huffman_writer_0.close()
    module_1.nlargest(var_0, var_0, var_0)


def test_case_3():
    huffman_coding_0 = module_0.HuffmanCoding()


def test_case_4():
    node_0 = module_0.Node()
    assert node_0.frequency == 0


@pytest.mark.xfail(strict=True)
def test_case_5():
    tuple_0 = ()
    node_0 = module_0.Node()
    assert node_0.frequency == 0
    node_0.__gt__(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\xd2\xc6&\xabIW\xd1\x1e\xb9\x1e\xe9V\xc0\x0fn\n\xe0a\xc9"
    node_0 = module_0.Node()
    assert node_0.frequency == 0
    var_0 = node_0.__str__()
    assert var_0 == "<ch: None: 0>"
    huffman_writer_0 = module_0.HuffmanWriter(var_0)
    assert huffman_writer_0.file == "<ch: None: 0>"
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    huffman_writer_0.write_int(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "K"
    node_0 = module_0.Node()
    assert node_0.frequency == 0
    var_0 = node_0.__repr__()
    assert var_0 == "<ch: None: 0>"
    tree_finder_0 = module_0.TreeFinder(var_0)
    assert tree_finder_0.root == "<ch: None: 0>"
    assert tree_finder_0.current_node == "<ch: None: 0>"
    var_1 = tree_finder_0.find(str_0)
    assert var_1 is True
    assert tree_finder_0.found == ""
    huffman_reader_0 = module_0.HuffmanReader(var_1)
    tree_finder_1 = module_0.TreeFinder(var_1)
    huffman_reader_0.load_tree()


def test_case_8():
    bool_0 = True
    huffman_reader_0 = module_0.HuffmanReader(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    node_0 = module_0.Node()
    assert node_0.frequency == 0
    var_0 = node_0.__str__()
    assert var_0 == "<ch: None: 0>"
    huffman_reader_0 = module_0.HuffmanReader(var_0)
    assert huffman_reader_0.file == "<ch: None: 0>"
    huffman_reader_0.get_number_of_additional_bits_in_the_last_byte()


def test_case_10():
    bytes_0 = b"c?\xd0\xcc\xe7Fi\x96\x15\xee\xea\x13\xf5\xeb\x8dk\r"
    huffman_writer_0 = module_0.HuffmanWriter(bytes_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0


def test_case_11():
    complex_0 = -1127.106536 - 1476.6j
    tree_finder_0 = module_0.TreeFinder(complex_0)


def test_case_12():
    none_type_0 = None
    tree_finder_0 = module_0.TreeFinder(none_type_0)
    list_0 = []
    var_0 = tree_finder_0.find(list_0)
    assert var_0 is True
    assert tree_finder_0.found == ""


@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b"2($\xe6\xa7\xe6\x7f\xd0\xb6\xd8\x9e\x8b\xa2%\x8e\xfa"
    tree_finder_0 = module_0.TreeFinder(bytes_0)
    none_type_0 = None
    var_0 = tree_finder_0.find(none_type_0)
    assert var_0 is True
    assert tree_finder_0.found == ""
    node_0 = module_0.Node()
    assert node_0.frequency == 0
    huffman_reader_0 = module_0.HuffmanReader(var_0)
    var_1 = node_0.__lt__(node_0)
    assert var_1 is False
    huffman_writer_0 = module_0.HuffmanWriter(var_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    tree_finder_1 = module_0.TreeFinder(huffman_writer_0)
    var_2 = huffman_writer_0.save_tree(node_0)
    assert huffman_writer_0.buffer == "1"
    assert huffman_writer_0.saved_bits == 1
    var_3 = var_2.__repr__()
    var_4 = tree_finder_1.find(var_3)
    assert tree_finder_1.found == ""
    huffman_writer_0.write_int(var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "K"
    none_type_0 = None
    huffman_writer_0 = module_0.HuffmanWriter(none_type_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    huffman_writer_0.write_char(str_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "K"
    none_type_0 = None
    node_0 = module_0.Node()
    assert node_0.frequency == 0
    var_0 = node_0.__eq__(node_0)
    assert var_0 is True
    tree_finder_0 = module_0.TreeFinder(none_type_0)
    var_1 = tree_finder_0.find(str_0)
    assert var_1 is True
    assert tree_finder_0.found == ""
    huffman_reader_0 = module_0.HuffmanReader(var_1)
    huffman_reader_0.load_tree()


@pytest.mark.xfail(strict=True)
def test_case_16():
    int_0 = -140
    none_type_0 = None
    huffman_reader_0 = module_0.HuffmanReader(none_type_0)
    huffman_reader_0.get_bit(int_0)


def test_case_17():
    bool_0 = False
    none_type_0 = None
    tree_finder_0 = module_0.TreeFinder(none_type_0)
    huffman_coding_0 = module_0.HuffmanCoding()
    huffman_coding_0.decode_file(bool_0, none_type_0)


def test_case_18():
    node_0 = module_0.Node()
    assert node_0.frequency == 0
    huffman_writer_0 = module_0.HuffmanWriter(node_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    var_0 = huffman_writer_0.save_tree(node_0)
    assert huffman_writer_0.buffer == "1"
    assert huffman_writer_0.saved_bits == 1


@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = True
    huffman_writer_0 = module_0.HuffmanWriter(bool_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    var_0 = huffman_writer_0.close()
    var_1 = var_0.__str__()
    tree_finder_0 = module_0.TreeFinder(var_1)
    var_2 = var_1.find(var_1)
    var_3 = var_2.__repr__()
    tree_finder_0.find(var_3)


@pytest.mark.xfail(strict=True)
def test_case_20():
    bytes_0 = b"2($\xe6\xa7\xe6\x7f\xd0\xb6\xd8\x9e\x8b\xa2%\x8e\xfa"
    tree_finder_0 = module_0.TreeFinder(bytes_0)
    node_0 = module_0.Node(tree_finder_0, left=bytes_0, right=bytes_0)
    none_type_0 = None
    huffman_reader_0 = module_0.HuffmanReader(none_type_0)
    huffman_writer_0 = module_0.HuffmanWriter(huffman_reader_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    tree_finder_1 = module_0.TreeFinder(none_type_0)
    huffman_writer_0.save_tree(node_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    bytes_0 = b"2($\xe6\xa7\xe6\x7f\xd0\xb6\xd8\x9e\x8b\xa2%\x8e\xfa"
    tree_finder_0 = module_0.TreeFinder(bytes_0)
    node_0 = module_0.Node(tree_finder_0, right=bytes_0)
    bool_0 = False
    huffman_reader_0 = module_0.HuffmanReader(bytes_0)
    none_type_0 = None
    huffman_writer_0 = module_0.HuffmanWriter(none_type_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    tree_finder_1 = module_0.TreeFinder(bool_0)
    huffman_writer_0.save_tree(node_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bytes_0 = b"2($\xe6\xa7\xe6\x7f\xd0\xb6\xd8\x9e\x8b\xa2%\x8e!\x9c\xfa"
    tree_finder_0 = module_0.TreeFinder(bytes_0)
    node_0 = module_0.Node(sign=bytes_0)
    assert node_0.frequency == 0
    huffman_reader_0 = module_0.HuffmanReader(bytes_0)
    huffman_writer_0 = module_0.HuffmanWriter(tree_finder_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    tree_finder_1 = module_0.TreeFinder(bytes_0)
    huffman_writer_0.save_tree(node_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = "1"
    none_type_0 = None
    tree_finder_0 = module_0.TreeFinder(none_type_0)
    tree_finder_0.find(str_0)
