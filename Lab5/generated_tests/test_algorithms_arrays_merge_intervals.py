# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.arrays.merge_intervals as module_0


def test_case_0():
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    list_0 = [interval_0]
    var_0 = interval_0.merge(list_0)
    var_1 = interval_0.print_intervals(var_0)
    interval_1 = module_0.Interval()
    assert len(interval_1) == 0
    var_2 = interval_0.__len__()
    assert var_2 == 0
    var_3 = interval_0.__eq__(interval_0)
    assert var_3 is True
    interval_2 = module_0.Interval(end=var_2)
    assert len(interval_2) == 0
    var_4 = interval_0.as_list()
    var_5 = interval_1.__len__()
    assert var_5 == 0
    var_6 = interval_0.__repr__()
    assert var_6 == "Interval (0, 0)"
    var_7 = module_0.merge_intervals(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    var_0 = interval_0.__len__()
    assert var_0 == 0
    var_1 = interval_0.__eq__(interval_0)
    assert var_1 is True
    interval_1 = module_0.Interval(end=var_0)
    assert len(interval_1) == 0
    var_2 = interval_0.print_intervals(interval_1)
    var_2.__getitem__(var_2)


def test_case_2():
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    list_0 = [interval_0]
    var_0 = interval_0.merge(list_0)
    interval_1 = module_0.Interval()
    assert len(interval_1) == 0
    var_1 = interval_0.__len__()
    assert var_1 == 0
    var_2 = interval_0.__eq__(interval_0)
    assert var_2 is True
    interval_2 = module_0.Interval(end=var_1)
    assert len(interval_2) == 0
    var_3 = interval_0.as_list()
    var_4 = interval_0.print_intervals(interval_2)
    var_5 = module_0.merge_intervals(var_4)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    module_0.merge_intervals(bool_0)


def test_case_4():
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0


def test_case_5():
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    list_0 = [interval_0, interval_0]
    var_0 = interval_0.merge(list_0)
    var_1 = interval_0.__repr__()
    assert var_1 == "Interval (0, 0)"


def test_case_6():
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    var_0 = interval_0.merge(interval_0)


def test_case_7():
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    list_0 = [interval_0, interval_0]
    var_0 = interval_0.merge(list_0)


def test_case_8():
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    list_0 = [interval_0, interval_0]
    var_0 = interval_0.merge(list_0)
    var_1 = module_0.merge_intervals(var_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    var_0 = interval_0.merge(interval_0)
    int_0 = -449
    var_1 = interval_0.__contains__(int_0)
    assert var_1 is False
    var_1.as_list()


def test_case_10():
    bool_0 = False
    var_0 = module_0.Interval(bool_0)
    assert len(var_0) == 0
    var_1 = var_0.as_list()


@pytest.mark.xfail(strict=True)
def test_case_11():
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    bool_0 = False
    var_0 = interval_0.__contains__(bool_0)
    assert var_0 is True
    var_1 = interval_0.as_list()
    var_0.print_intervals(bool_0)


def test_case_12():
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    var_0 = interval_0.__eq__(interval_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "'.iY48<+|h>/16W'"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.merge_intervals(list_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "-;B\n:Ln"
    interval_0 = module_0.Interval(str_0)
    assert interval_0.end == 0
    interval_1 = module_0.Interval(str_0)
    assert interval_1.end == 0
    interval_2 = module_0.Interval()
    assert len(interval_2) == 0
    none_type_0 = None
    var_0 = module_0.merge_intervals(none_type_0)
    bool_0 = True
    var_1 = interval_2.__contains__(bool_0)
    assert var_1 is False
    var_2 = module_0.merge_intervals(var_0)
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b"\xde\xf2\xff0\xc6\x10L\xaaO\x89{\x13N\xac\xae#\x97\x9aO"
    list_0 = [bytes_0, bytes_0]
    var_0 = module_0.merge_intervals(list_0)
    var_1 = var_0.__iter__()
    var_1.as_list()


@pytest.mark.xfail(strict=True)
def test_case_16():
    float_0 = -1565.7
    none_type_0 = None
    interval_0 = module_0.Interval(end=none_type_0)
    assert interval_0.start == 0
    interval_0.__getitem__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    var_0 = interval_0.__repr__()
    assert var_0 == "Interval (0, 0)"
    interval_1 = module_0.Interval(end=var_0)
    assert interval_1.start == 0
    assert interval_1.end == "Interval (0, 0)"
    var_1 = interval_1.__eq__(interval_0)
    assert var_1 is False
    interval_1.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_18():
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    list_0 = [interval_0, interval_0]
    var_0 = interval_0.__repr__()
    assert var_0 == "Interval (0, 0)"
    var_1 = interval_0.merge(list_0)
    interval_1 = module_0.Interval(var_0)
    assert interval_1.start == "Interval (0, 0)"
    assert interval_1.end == 0
    var_2 = interval_1.__eq__(interval_0)
    assert var_2 is False
    var_2.__len__()
