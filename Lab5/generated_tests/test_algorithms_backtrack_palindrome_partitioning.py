# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.backtrack.palindrome_partitioning as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "!JL"
    var_0 = module_0.palindromic_substrings_iter(str_0)
    module_0.palindromic_substrings(var_0)


def test_case_1():
    bytes_0 = b"\x0c\xb3\xde\xe1\xce\x0c\xe3\x05y/0\xeem"
    list_0 = [bytes_0]
    var_0 = module_0.palindromic_substrings(list_0)


def test_case_2():
    bool_0 = False
    var_0 = module_0.palindromic_substrings_iter(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "z7\x0ccMY=Ge/*P6[|a&D{D"
    var_0 = module_0.palindromic_substrings(str_0)
    float_0 = -2785.399
    module_0.palindromic_substrings(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    var_0 = module_0.palindromic_substrings_iter(none_type_0)
    module_1.object(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 2834
    set_0 = {int_0, int_0}
    bool_0 = False
    var_0 = module_0.palindromic_substrings_iter(set_0)
    tuple_0 = (int_0, set_0, bool_0)
    object_0 = module_0.palindromic_substrings(tuple_0)
    module_1.object(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\xc9\xf1\t\xec\xdd\xaa\xe0x\x06\xc6\xf7\x98\x80p\xaexsx"
    var_0 = module_0.palindromic_substrings_iter(bytes_0)
    var_1 = module_0.palindromic_substrings(bytes_0)
    var_2 = module_0.palindromic_substrings_iter(var_1)
    module_1.object(*var_2)
